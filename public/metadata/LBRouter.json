{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "contract ILBFactory",
            "name": "factory2_2",
            "type": "address"
          },
          {
            "internalType": "contract IJoeFactory",
            "name": "factoryV1",
            "type": "address"
          },
          {
            "internalType": "contract ILBLegacyFactory",
            "name": "legacyFactory",
            "type": "address"
          },
          {
            "internalType": "contract ILBLegacyRouter",
            "name": "legacyRouter",
            "type": "address"
          },
          {
            "internalType": "contract ILBFactory",
            "name": "factory2_1",
            "type": "address"
          },
          {
            "internalType": "contract IWNATIVE",
            "name": "wnative",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__InsufficientAmount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__InsufficientLiquidity",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountSlippage",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__AmountSlippageBPTooBig",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountXMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountX",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountY",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__AmountSlippageCaught",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__BinReserveOverflows",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBRouter__BrokenSwapSafetyCheck",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "currentTimestamp",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__DeadlineExceeded",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__FailedToSendNATIVE",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "idDesired",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "idSlippage",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__IdDesiredOverflows",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "int256",
            "name": "id",
            "type": "int256"
          }
        ],
        "name": "LBRouter__IdOverflows",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "activeIdDesired",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "idSlippage",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "activeId",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__IdSlippageCaught",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__InsufficientAmountOut",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "wrongToken",
            "type": "address"
          }
        ],
        "name": "LBRouter__InvalidTokenPath",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "version",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__InvalidVersion",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBRouter__LengthsMismatch",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountInMax",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__MaxAmountInExceeded",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBRouter__NotFactoryOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenX",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenY",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "binStep",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__PairNotCreated",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBRouter__SenderIsNotWNATIVE",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__SwapOverflows",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "excess",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__TooMuchTokensIn",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "reserve",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__WrongAmounts",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenX",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenY",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amountX",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountY",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          }
        ],
        "name": "LBRouter__WrongNativeLiquidityParameters",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBRouter__WrongTokenOrder",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PackedUint128Math__SubUnderflow",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TokenHelper__TransferFailed",
        "type": "error"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "contract IERC20",
                "name": "tokenX",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "tokenY",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "binStep",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountXMin",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountYMin",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "activeIdDesired",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "idSlippage",
                "type": "uint256"
              },
              {
                "internalType": "int256[]",
                "name": "deltaIds",
                "type": "int256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "distributionX",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "distributionY",
                "type": "uint256[]"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "refundTo",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              }
            ],
            "internalType": "struct ILBRouter.LiquidityParameters",
            "name": "liquidityParameters",
            "type": "tuple"
          }
        ],
        "name": "addLiquidity",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountXAdded",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYAdded",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountXLeft",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYLeft",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "depositIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "liquidityMinted",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "contract IERC20",
                "name": "tokenX",
                "type": "address"
              },
              {
                "internalType": "contract IERC20",
                "name": "tokenY",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "binStep",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountXMin",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountYMin",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "activeIdDesired",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "idSlippage",
                "type": "uint256"
              },
              {
                "internalType": "int256[]",
                "name": "deltaIds",
                "type": "int256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "distributionX",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "distributionY",
                "type": "uint256[]"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "refundTo",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              }
            ],
            "internalType": "struct ILBRouter.LiquidityParameters",
            "name": "liquidityParameters",
            "type": "tuple"
          }
        ],
        "name": "addLiquidityNATIVE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountXAdded",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYAdded",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountXLeft",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYLeft",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "depositIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "liquidityMinted",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IERC20",
            "name": "tokenX",
            "type": "address"
          },
          {
            "internalType": "contract IERC20",
            "name": "tokenY",
            "type": "address"
          },
          {
            "internalType": "uint24",
            "name": "activeId",
            "type": "uint24"
          },
          {
            "internalType": "uint16",
            "name": "binStep",
            "type": "uint16"
          }
        ],
        "name": "createLBPair",
        "outputs": [
          {
            "internalType": "contract ILBPair",
            "name": "pair",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactory",
        "outputs": [
          {
            "internalType": "contract ILBFactory",
            "name": "lbFactory",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactoryV2_1",
        "outputs": [
          {
            "internalType": "contract ILBFactory",
            "name": "lbFactory",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ILBPair",
            "name": "pair",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          }
        ],
        "name": "getIdFromPrice",
        "outputs": [
          {
            "internalType": "uint24",
            "name": "",
            "type": "uint24"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLegacyFactory",
        "outputs": [
          {
            "internalType": "contract ILBLegacyFactory",
            "name": "legacyLBfactory",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLegacyRouter",
        "outputs": [
          {
            "internalType": "contract ILBLegacyRouter",
            "name": "legacyRouter",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ILBPair",
            "name": "pair",
            "type": "address"
          },
          {
            "internalType": "uint24",
            "name": "id",
            "type": "uint24"
          }
        ],
        "name": "getPriceFromId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ILBPair",
            "name": "pair",
            "type": "address"
          },
          {
            "internalType": "uint128",
            "name": "amountOut",
            "type": "uint128"
          },
          {
            "internalType": "bool",
            "name": "swapForY",
            "type": "bool"
          }
        ],
        "name": "getSwapIn",
        "outputs": [
          {
            "internalType": "uint128",
            "name": "amountIn",
            "type": "uint128"
          },
          {
            "internalType": "uint128",
            "name": "amountOutLeft",
            "type": "uint128"
          },
          {
            "internalType": "uint128",
            "name": "fee",
            "type": "uint128"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ILBPair",
            "name": "pair",
            "type": "address"
          },
          {
            "internalType": "uint128",
            "name": "amountIn",
            "type": "uint128"
          },
          {
            "internalType": "bool",
            "name": "swapForY",
            "type": "bool"
          }
        ],
        "name": "getSwapOut",
        "outputs": [
          {
            "internalType": "uint128",
            "name": "amountInLeft",
            "type": "uint128"
          },
          {
            "internalType": "uint128",
            "name": "amountOut",
            "type": "uint128"
          },
          {
            "internalType": "uint128",
            "name": "fee",
            "type": "uint128"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getV1Factory",
        "outputs": [
          {
            "internalType": "contract IJoeFactory",
            "name": "factoryV1",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getWNATIVE",
        "outputs": [
          {
            "internalType": "contract IWNATIVE",
            "name": "wnative",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IERC20",
            "name": "tokenX",
            "type": "address"
          },
          {
            "internalType": "contract IERC20",
            "name": "tokenY",
            "type": "address"
          },
          {
            "internalType": "uint16",
            "name": "binStep",
            "type": "uint16"
          },
          {
            "internalType": "uint256",
            "name": "amountXMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountYMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "removeLiquidity",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountX",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountY",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IERC20",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint16",
            "name": "binStep",
            "type": "uint16"
          },
          {
            "internalType": "uint256",
            "name": "amountTokenMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountNATIVEMin",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "address payable",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "removeLiquidityNATIVE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountToken",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountNATIVE",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactNATIVEForTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOutMinNATIVE",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address payable",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactTokensForNATIVE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOutMinNATIVE",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address payable",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactTokensForTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapNATIVEForExactTokens",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "amountsIn",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountNATIVEOut",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountInMax",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address payable",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapTokensForExactNATIVE",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "amountsIn",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountInMax",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256[]",
                "name": "pairBinSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "contract IERC20[]",
                "name": "tokenPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct ILBRouter.Path",
            "name": "path",
            "type": "tuple"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          }
        ],
        "name": "swapTokensForExactTokens",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "amountsIn",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IERC20",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "sweep",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ILBToken",
            "name": "lbToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "sweepLBToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "devdoc": {
      "author": "Trader Joe",
      "kind": "dev",
      "methods": {
        "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
          "details": "This function is compliant with fee on transfer tokens",
          "params": {
            "liquidityParameters": "The liquidity parameters"
          },
          "returns": {
            "amountXAdded": "The amount of token X added",
            "amountXLeft": "The amount of token X left (sent back to liquidityParameters.refundTo)",
            "amountYAdded": "The amount of token Y added",
            "amountYLeft": "The amount of token Y left (sent back to liquidityParameters.refundTo)",
            "depositIds": "The ids of the deposits",
            "liquidityMinted": "The amount of liquidity minted"
          }
        },
        "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
          "details": "This function is compliant with fee on transfer tokens",
          "params": {
            "liquidityParameters": "The liquidity parameters"
          },
          "returns": {
            "amountXAdded": "The amount of token X added",
            "amountXLeft": "The amount of token X left (sent back to liquidityParameters.refundTo)",
            "amountYAdded": "The amount of token Y added",
            "amountYLeft": "The amount of token Y left (sent back to liquidityParameters.refundTo)",
            "depositIds": "The ids of the deposits",
            "liquidityMinted": "The amount of liquidity minted"
          }
        },
        "constructor": {
          "params": {
            "factory2_1": "Address of Joe V2.1 factory",
            "factory2_2": "Address of Joe V2.2 factory",
            "factoryV1": "Address of Joe V1 factory",
            "legacyFactory": "Address of Joe V2 factory",
            "legacyRouter": "Address of Joe V2 router",
            "wnative": "Address of WNATIVE"
          }
        },
        "createLBPair(address,address,uint24,uint16)": {
          "params": {
            "activeId": "The active id of the pair",
            "binStep": "The bin step in basis point, used to calculate log(1 + binStep)",
            "tokenX": "The address of the first token",
            "tokenY": "The address of the second token"
          },
          "returns": {
            "pair": "The address of the newly created LBPair"
          }
        },
        "getFactory()": {
          "returns": {
            "lbFactory": "The address of the factory V2.1"
          }
        },
        "getFactoryV2_1()": {
          "returns": {
            "lbFactory": "The address of the factory V2.1"
          }
        },
        "getIdFromPrice(address,uint256)": {
          "params": {
            "pair": "The address of the LBPair",
            "price": "The price of y per x (multiplied by 1e36)"
          },
          "returns": {
            "_0": "The id corresponding to this price"
          }
        },
        "getLegacyFactory()": {
          "returns": {
            "legacyLBfactory": "The address of the factory V2"
          }
        },
        "getLegacyRouter()": {
          "returns": {
            "legacyRouter": "The address of the router V2"
          }
        },
        "getPriceFromId(address,uint24)": {
          "params": {
            "id": "The id",
            "pair": "The address of the LBPair"
          },
          "returns": {
            "_0": "The price corresponding to this id"
          }
        },
        "getSwapIn(address,uint128,bool)": {
          "params": {
            "amountOut": "The amount of token to receive",
            "pair": "The address of the LBPair",
            "swapForY": "Whether you swap X for Y (true), or Y for X (false)"
          },
          "returns": {
            "amountIn": "The amount of token to send in order to receive amountOut token",
            "amountOutLeft": "The amount of token Out that can't be returned due to a lack of liquidity",
            "fee": "The amount of fees paid in token sent"
          }
        },
        "getSwapOut(address,uint128,bool)": {
          "params": {
            "amountIn": "The amount of token sent",
            "pair": "The address of the LBPair",
            "swapForY": "Whether you swap X for Y (true), or Y for X (false)"
          },
          "returns": {
            "amountInLeft": "The amount of token In that can't be swapped due to a lack of liquidity",
            "amountOut": "The amount of token received if amountIn tokenX are sent",
            "fee": "The amount of fees paid in token sent"
          }
        },
        "getV1Factory()": {
          "returns": {
            "factoryV1": "The address of the factory V1"
          }
        },
        "getWNATIVE()": {
          "returns": {
            "wnative": "The address of WNATIVE"
          }
        },
        "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
          "details": "This function is compliant with fee on transfer tokens",
          "params": {
            "amountXMin": "The min amount to receive of token X",
            "amountYMin": "The min amount to receive of token Y",
            "amounts": "The list of amounts to burn of each id in `_ids`",
            "binStep": "The bin step of the LBPair",
            "deadline": "The deadline of the tx",
            "ids": "The list of ids to burn",
            "to": "The address of the recipient",
            "tokenX": "The address of token X",
            "tokenY": "The address of token Y"
          },
          "returns": {
            "amountX": "Amount of token X returned",
            "amountY": "Amount of token Y returned"
          }
        },
        "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
          "details": "This function is **NOT** compliant with fee on transfer tokens. This is wanted as it would make users pays the fee on transfer twice, use the `removeLiquidity` function to remove liquidity with fee on transfer tokens.",
          "params": {
            "amountNATIVEMin": "The min amount to receive of NATIVE",
            "amountTokenMin": "The min amount to receive of token",
            "amounts": "The list of amounts to burn of each id in `_ids`",
            "binStep": "The bin step of the LBPair",
            "deadline": "The deadline of the tx",
            "ids": "The list of ids to burn",
            "to": "The address of the recipient",
            "token": "The address of token"
          },
          "returns": {
            "amountNATIVE": "Amount of NATIVE returned",
            "amountToken": "Amount of token returned"
          }
        },
        "swapExactNATIVEForTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountOutMin": "The min amount of token to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountOutMin": "The min amount of token to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapExactTokensForNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountIn": "The amount of token to send",
            "amountOutMinNATIVE": "The min amount of NATIVE to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountIn": "The amount of token to send",
            "amountOutMinNATIVE": "The min amount of NATIVE to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapExactTokensForTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountIn": "The amount of token to send",
            "amountOutMin": "The min amount of token to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountIn": "The amount of token to send",
            "amountOutMin": "The min amount of token to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountOut": "Output amount of the swap"
          }
        },
        "swapNATIVEForExactTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "details": "Will refund any NATIVE amount sent in excess to `msg.sender`",
          "params": {
            "amountOut": "The amount of tokens to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountsIn": "path amounts for every step of the swap"
          }
        },
        "swapTokensForExactNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountInMax": "The max amount of token to send",
            "amountNATIVEOut": "The amount of NATIVE to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountsIn": "path amounts for every step of the swap"
          }
        },
        "swapTokensForExactTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "params": {
            "amountInMax": "The max amount of token to send",
            "amountOut": "The amount of token to receive",
            "deadline": "The deadline of the tx",
            "path": "The path of the swap",
            "to": "The address of the recipient"
          },
          "returns": {
            "amountsIn": "Input amounts of the swap"
          }
        },
        "sweep(address,address,uint256)": {
          "details": "Only callable by the factory owner",
          "params": {
            "amount": "The amount to send",
            "to": "The address of the user to send back the tokens",
            "token": "The address of the token"
          }
        },
        "sweepLBToken(address,address,uint256[],uint256[])": {
          "details": "Only callable by the factory owner",
          "params": {
            "amounts": "The list of amounts to send",
            "ids": "The list of token ids",
            "lbToken": "The address of the LBToken",
            "to": "The address of the user to send back the tokens"
          }
        }
      },
      "title": "Liquidity Book Router",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
          "notice": "Add liquidity while performing safety checks"
        },
        "addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
          "notice": "Add liquidity with NATIVE while performing safety checks"
        },
        "constructor": {
          "notice": "Constructor"
        },
        "createLBPair(address,address,uint24,uint16)": {
          "notice": "Create a liquidity bin LBPair for tokenX and tokenY using the factory"
        },
        "getFactory()": {
          "notice": "View function to get the factory V2.1 address"
        },
        "getFactoryV2_1()": {
          "notice": "View function to get the factory V2.1 address"
        },
        "getIdFromPrice(address,uint256)": {
          "notice": "Returns the approximate id corresponding to the inputted price. Warning, the returned id may be inaccurate close to the start price of a bin"
        },
        "getLegacyFactory()": {
          "notice": "View function to get the factory V2 address"
        },
        "getLegacyRouter()": {
          "notice": "View function to get the router V2 address"
        },
        "getPriceFromId(address,uint24)": {
          "notice": "Returns the price corresponding to the inputted id"
        },
        "getSwapIn(address,uint128,bool)": {
          "notice": "Simulate a swap in"
        },
        "getSwapOut(address,uint128,bool)": {
          "notice": "Simulate a swap out"
        },
        "getV1Factory()": {
          "notice": "View function to get the factory V1 address"
        },
        "getWNATIVE()": {
          "notice": "View function to get the WNATIVE address"
        },
        "removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
          "notice": "Remove liquidity while performing safety checks"
        },
        "removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
          "notice": "Remove NATIVE liquidity while performing safety checks"
        },
        "swapExactNATIVEForTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact NATIVE for tokens while performing safety checks"
        },
        "swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact NATIVE for tokens while performing safety checks supporting for fee on transfer tokens"
        },
        "swapExactTokensForNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact tokens for NATIVE while performing safety checks"
        },
        "swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact tokens for NATIVE while performing safety checks supporting for fee on transfer tokens"
        },
        "swapExactTokensForTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact tokens for tokens while performing safety checks"
        },
        "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps exact tokens for tokens while performing safety checks supporting for fee on transfer tokens"
        },
        "swapNATIVEForExactTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps NATIVE for exact tokens while performing safety checks"
        },
        "swapTokensForExactNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps tokens for exact NATIVE while performing safety checks"
        },
        "swapTokensForExactTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
          "notice": "Swaps tokens for exact tokens while performing safety checks"
        },
        "sweep(address,address,uint256)": {
          "notice": "Unstuck tokens that are sent to this contract by mistake"
        },
        "sweepLBToken(address,address,uint256[],uint256[])": {
          "notice": "Unstuck LBTokens that are sent to this contract by mistake"
        }
      },
      "notice": "Main contract to interact with to swap and manage liquidity on Joe V2 exchange.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/joe-v2/src/LBRouter.sol": "LBRouter"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "remappings": []
  },
  "sources": {
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "license": "MIT",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ]
    },
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
      "license": "MIT",
      "urls": [
        "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
        "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
      ]
    },
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "license": "MIT",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ]
    },
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
      "license": "MIT",
      "urls": [
        "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
        "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
      ]
    },
    "contracts/joe-v2/src/LBRouter.sol": {
      "keccak256": "0x6d0bce2108c2861060204600173fe69d052c0eb7f9ff2b4b1751ee4421146dfe",
      "license": "MIT",
      "urls": [
        "bzz-raw://0dffab7a1e06a396f95cc1b6e3e1e93ddedea2ef493aaf6b6d457e9e8d27435f",
        "dweb:/ipfs/QmPmbXkfvxMAXGbDH5ZtfQ7PdUN1PX79A2D9qJrJQrEWTm"
      ]
    },
    "contracts/joe-v2/src/interfaces/IJoeFactory.sol": {
      "keccak256": "0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://39e15e3db5f37a23410e6917d0f006390bfe48bb7e1549242e2927c498ee9c70",
        "dweb:/ipfs/QmapjmXv1ouKPGL7vvLYaaFakxZ3YJb55LdNe2nyN8RZaz"
      ]
    },
    "contracts/joe-v2/src/interfaces/IJoePair.sol": {
      "keccak256": "0x8f3f3f22167722e8e0b200768ef953b5f5a84064cf385e16d162ac4229f34c23",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://c7d698db18059eadd0490f68c69b04b5349150346601dc6951d8cc2a2796bc25",
        "dweb:/ipfs/Qmd2CxzN7GtM8BhkotDroJkWLEYdvT8U3vwYSK4chbSWos"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBFactory.sol": {
      "keccak256": "0xfc815a05b28165166b4e06c9c025e35807d5e0f6a406b96ec7ebe176dedf8d95",
      "license": "MIT",
      "urls": [
        "bzz-raw://3542a541bec579d39f1e9dbb0f45d3f70ce3ebf45c74449b36ebdd697e06f6b3",
        "dweb:/ipfs/QmUPbvYBpVPwW9Xb9UBukrBzuQirTSv6rwaurVrgV1CLSt"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBFlashLoanCallback.sol": {
      "keccak256": "0x14e08d6774de7f9a6b0b008e4a2132e28ac5d9e0ed9327c2d305ccd4a8e500d8",
      "license": "MIT",
      "urls": [
        "bzz-raw://316063733817a0d300b2f3c6cdd598be35745343646601dd370c1037e851bd88",
        "dweb:/ipfs/QmRV3tNsZ4VcyNWiBphDbWM8bxV41sstKkgziuYyGphnE7"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBHooks.sol": {
      "keccak256": "0xad32a000f052e48266932bc3eb9818de0a80b77235ae5d44d9a5286264992f1a",
      "license": "MIT",
      "urls": [
        "bzz-raw://044044be7373a509f946ede2ee05580f55438ce317e3c538a888208f18f39109",
        "dweb:/ipfs/QmWK93hkd91t7LQRnVN1QZXUniCLh5HifXrww5BhRxaD9n"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyFactory.sol": {
      "keccak256": "0x3269cc8e517d0a7e366d3b739336d3817411628bb9f528261be000f47ae45c9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://3b2180a6846857f20d26b3ae98b1270359b1b2ad1dc0cfb011744e7703d0b2c3",
        "dweb:/ipfs/QmfG68dWC8Xkik3YpnYxTP1cLxmyokDB4CTW4frkvCiwGe"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyPair.sol": {
      "keccak256": "0x21c9cbc346115dae037994b0a176fda4b9017202233ef49b0c90ffbf5b136368",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba6657c183ee7c2cc232cae83249a9f6da8c870833eec1f380b735edc35b1e78",
        "dweb:/ipfs/QmY3wRKixjJfVkjzrnVoFwjnDfewSYCzc54MihCs51n4dB"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyRouter.sol": {
      "keccak256": "0x65219b048a847edc2b77d51dcbd31472aa7df01227d94d22926f7a810c661368",
      "license": "MIT",
      "urls": [
        "bzz-raw://e15005847afe52ad3049bbd15c5ada9f50a56f10e962a740f34ba467b3ba9af8",
        "dweb:/ipfs/QmU8Fvm9hvvV1nDraD6jDcfHTCU2FuCFj15ggxN6D76Wdv"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyToken.sol": {
      "keccak256": "0x6eb89172d4041a84c97ec5f35954e15ce3c7f704d1aabc0c9a1cbf11f868ee6c",
      "license": "MIT",
      "urls": [
        "bzz-raw://360d38d9f83344daeae27681ee85d68e8b6f7ca3598e2d38b09ef319ca438ff3",
        "dweb:/ipfs/QmY9TMZ1SAuQaFxSj4uCDZzjj5ZHS6q4NVw5LzHDgAp8qZ"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBPair.sol": {
      "keccak256": "0x9c2afceaceaa81e316e09122d89f6ae4310353877178a1cae4a36756f26e3ee1",
      "license": "MIT",
      "urls": [
        "bzz-raw://fa6917af5b29e67f5496b1043abba27f4af41481df094ec69aba36331c4229ce",
        "dweb:/ipfs/QmP84Q4P5dNw18FDhg4xXPbHXgNxggRicmJmAPNpkTxUjo"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBRouter.sol": {
      "keccak256": "0xc2330634cbb078a35639ea73033300c426b28ae53aa79d0ee9b11c33b35dfb98",
      "license": "MIT",
      "urls": [
        "bzz-raw://b1f2934241b5499d895c8b1e31b8372fa3face92ba0e82297e491f1a69e2d128",
        "dweb:/ipfs/QmeTiaBG37H2oDY8axh8VceH3rksonFEY9gdgJxRo97Njh"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBToken.sol": {
      "keccak256": "0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba0a398ffeea4227ce9eee3a76c97a47a8ac39ac2b85cda60bc24a93c5c7386a",
        "dweb:/ipfs/QmP1oUtTGG6PWu1n9T7n38iQVKMsDavhA9kCyLSjWTEgLt"
      ]
    },
    "contracts/joe-v2/src/interfaces/IWNATIVE.sol": {
      "keccak256": "0x51912963f64926845c6d02db0e4925f3bfef8eeefb5b20997d4e64c7ea40a020",
      "license": "MIT",
      "urls": [
        "bzz-raw://f25bf0e1cce04c89c339f6bba1e28ff520dfffd1b562f1def9717279d8180a20",
        "dweb:/ipfs/QmQY5TKhxfLxTsqbvD5zP5p3enWo8z5FXEocbvTM8MTMC6"
      ]
    },
    "contracts/joe-v2/src/libraries/BinHelper.sol": {
      "keccak256": "0xa6195c864ee0b8dca8fca9e7caa57cbd7bc9030c70aae4e1f1539db72390c2e7",
      "license": "MIT",
      "urls": [
        "bzz-raw://2a000530f5d9bd7a9c6c908c568d256a66f2b3e69d0ec78e027162f25b7393f9",
        "dweb:/ipfs/QmZypaixp9XeSCY5sWCrQXqQYUXEZpzqcHQSq7WowYraP5"
      ]
    },
    "contracts/joe-v2/src/libraries/Constants.sol": {
      "keccak256": "0xeb531944284c1a12410b47605869a65f7a3d6f97e24e9dff5a9b8972e9dd6e5a",
      "license": "MIT",
      "urls": [
        "bzz-raw://4840c7e6de5c27bd9c46bed582bdaa9e7de4b9d3e9441a4b7b0de40f6ae1e7ca",
        "dweb:/ipfs/QmNZnqNc2MayvLR3VsmPZ3tzhkFkPgD3J7tKLwWr6mzFxM"
      ]
    },
    "contracts/joe-v2/src/libraries/FeeHelper.sol": {
      "keccak256": "0x577da4f975f0b547bcfabe9fe6ca8562bcbe12459e0b4b40408829453eabedef",
      "license": "MIT",
      "urls": [
        "bzz-raw://cbd6b51786286234c95eaa6e20b78365ee661baacf8fa8d15b1208eebaf1b3c7",
        "dweb:/ipfs/QmSNtWqGMiuzCjYnLTMKCuYFkAcNunQ5uXKSPeU3jt7uRh"
      ]
    },
    "contracts/joe-v2/src/libraries/Hooks.sol": {
      "keccak256": "0xa68b3308bf297c2cd03f2e4f28a6a5e0e68c415d617672bf356aadff56c53959",
      "license": "MIT",
      "urls": [
        "bzz-raw://b9a6b20fd8aeefacb64dbf3b463b0c10cb8848fd61f4f3344ed53731ffaf686a",
        "dweb:/ipfs/QmRvcBNazvsKvfDXQtdQj3GczaNLbFcqVYdcJCoRA6MDop"
      ]
    },
    "contracts/joe-v2/src/libraries/JoeLibrary.sol": {
      "keccak256": "0x8d5f41e6a440f97475138cff9a22eef7cfe24dc489c4dcd28d64206eba50c243",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://c7e3a7450f460794f5ccfb4b1b8c6a9ad13c20b2ce3a62ba2acb2a17e1021131",
        "dweb:/ipfs/QmbaerUuNUgT1DYy1vm7eFCk6JpCy6dkpfpAcYZsNNH3Lm"
      ]
    },
    "contracts/joe-v2/src/libraries/PairParameterHelper.sol": {
      "keccak256": "0x53163f663dad415ede2e5f0705700268445eb0586070fb253ff65f9afbcc1a8b",
      "license": "MIT",
      "urls": [
        "bzz-raw://4f07672f538f7b0a4b826379f988d5cd17c93eab371b8dee597a2228f2c1533d",
        "dweb:/ipfs/Qmaq2AUCiRzrqnWPVE7TH62ZTUcYJ4cXSGGRQV4q8ASELZ"
      ]
    },
    "contracts/joe-v2/src/libraries/PriceHelper.sol": {
      "keccak256": "0xe660c07d0812609a65bcdccc1d7212116e8075c3a86cf9b15ead3639b0f9fdb7",
      "license": "MIT",
      "urls": [
        "bzz-raw://61c85e1bc1107f22b13c3c5e43fdda89eb6ed3f9ab9df123e18914b24f3ff054",
        "dweb:/ipfs/QmUewajrhnmLPJ7qgDmXb4FZbNJdtArxGu5eQca8Mo1YTb"
      ]
    },
    "contracts/joe-v2/src/libraries/TokenHelper.sol": {
      "keccak256": "0x466462528008d2b64f46dc91de2d6963ea8cf88933affdb913dd83f8fe9d5787",
      "license": "MIT",
      "urls": [
        "bzz-raw://2cd3f4c3658287550e1afc53755d37d1ff9ed2b9124593330c5c10cfbde8233c",
        "dweb:/ipfs/QmZVJwVCCK223uzZ2Sne6r1mJSxYu7BufXpAmXGAyHPETc"
      ]
    },
    "contracts/joe-v2/src/libraries/math/BitMath.sol": {
      "keccak256": "0x7b359776521706ae1291cbf8707919aaa5cb78d59b9dfbe5393322c393250b1f",
      "license": "MIT",
      "urls": [
        "bzz-raw://bb9fe4accf6abda06f8b4ba02f86d37df109e4b8d14b78a848eb4b4cee359485",
        "dweb:/ipfs/QmSTkrek6fhvgiato8tC6ARz4M11Ynqgyuy7d2QeGiWXEG"
      ]
    },
    "contracts/joe-v2/src/libraries/math/Encoded.sol": {
      "keccak256": "0xd7caeb3b8c48ac9015c89a5fc6e6387a421359c0d773b6cd276baa17eb8c4c3f",
      "license": "MIT",
      "urls": [
        "bzz-raw://100c723b4e0739a2fcb9e6f429c0db1583392a92bb8e85af41f1e1b3f632ab50",
        "dweb:/ipfs/QmSCWAoZfo8hS4ZUUcohahc93pMLSUXFHLfkpLq7QBkPBz"
      ]
    },
    "contracts/joe-v2/src/libraries/math/LiquidityConfigurations.sol": {
      "keccak256": "0x0508102d0e1197ec2e323bd518fae0862c379345a1473e095509ff53c6070e74",
      "license": "MIT",
      "urls": [
        "bzz-raw://ebcaba260405c768eacd1a9aaf5e824936324410b85a57b87383832fca8ab580",
        "dweb:/ipfs/QmVDrsm2RVPXB6L8bNmMQnxNnrUeavscWPtfERVCbRY6i7"
      ]
    },
    "contracts/joe-v2/src/libraries/math/PackedUint128Math.sol": {
      "keccak256": "0x4e57313a54c7809e23cfbda591daf98f21fbabe6db88168c98f62e9cf48199bb",
      "license": "MIT",
      "urls": [
        "bzz-raw://f14817b310ad63744d86bdcb460d5b226c450d180e61ef7a6aae00bf02bb9bab",
        "dweb:/ipfs/QmR6ua4JXdFgwaUKzRTCbBvQGKvQD2arHS1RkDf8zTzU2e"
      ]
    },
    "contracts/joe-v2/src/libraries/math/SafeCast.sol": {
      "keccak256": "0x3e22926e8f7d352568f01a896860c83b3ab35b47a0ed9a0f2e780a82aa52f4a8",
      "license": "MIT",
      "urls": [
        "bzz-raw://3fc2ade1520197ab28ad6292a1d70d3182b9741030ad69c8a915b4c09ebec1f5",
        "dweb:/ipfs/QmYRtP5AiMXCpiBPrmuWd2R1mYGyuXoa24GeZJRUBSS7wH"
      ]
    },
    "contracts/joe-v2/src/libraries/math/Uint128x128Math.sol": {
      "keccak256": "0xe84206e2561ef32aef2d23ce5022f0174898a26d4d60346675e7a7fd76054fc0",
      "license": "MIT",
      "urls": [
        "bzz-raw://4238023aeb54caf0d245b00063b37a736142413d3040a175b8d5765ee148242d",
        "dweb:/ipfs/QmSqvRJAxtCLjkp19rW8jxzvocr6e478u2Ge5iLyJojJXF"
      ]
    },
    "contracts/joe-v2/src/libraries/math/Uint256x256Math.sol": {
      "keccak256": "0xa85a6d3be7cdf95ec9b246d36c3843de738af3df11fcc2bf8bf6e15c350870d6",
      "license": "MIT",
      "urls": [
        "bzz-raw://ffa97dbe1dc755a243a81a2590e3f25e5399549351a941c2835cca190a0a3fa0",
        "dweb:/ipfs/QmbKUhSjHj1Y48dCPfiYSLybQ8miYfQ99EWsWdP8orpeaB"
      ]
    }
  },
  "version": 1
}
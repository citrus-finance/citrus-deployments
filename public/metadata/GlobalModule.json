{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "ExecutionFailed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidNonce",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "domainSeparator",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISafe",
            "name": "safe",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint8",
            "name": "operation",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "_nonce",
            "type": "uint256"
          }
        ],
        "name": "encodeTransactionData",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISafe",
            "name": "safe",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint8",
            "name": "operation",
            "type": "uint8"
          },
          {
            "internalType": "bytes",
            "name": "signatures",
            "type": "bytes"
          }
        ],
        "name": "execTransaction",
        "outputs": [
          {
            "internalType": "bool",
            "name": "success",
            "type": "bool"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISafe",
            "name": "safe",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint8",
            "name": "operation",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "_nonce",
            "type": "uint256"
          }
        ],
        "name": "getTransactionHash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentNonce",
            "type": "uint256"
          }
        ],
        "name": "increaseNonce",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISafe",
            "name": "",
            "type": "address"
          }
        ],
        "name": "nonces",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "domainSeparator()": {
          "details": "Returns the domain separator for the safe contract, as defined in the EIP-712 standard.",
          "returns": {
            "_0": "bytes32 The domain separator hash."
          }
        },
        "encodeTransactionData(address,address,uint256,bytes,uint8,uint256)": {
          "params": {
            "_nonce": "Transaction nonce.",
            "data": "Data payload.",
            "operation": "Operation type.",
            "safe": "The safe the transaction will be executed on",
            "to": "Destination address.",
            "value": "Ether value."
          },
          "returns": {
            "_0": "Transaction hash bytes."
          }
        },
        "execTransaction(address,address,uint256,bytes,uint8,bytes)": {
          "details": "This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      It is the responsibility of the caller to perform such checks.",
          "params": {
            "data": "Data payload of Safe transaction.",
            "operation": "Operation type of Safe transaction.",
            "safe": "The safe the transaction will be executed on",
            "signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.",
            "to": "Destination address of Safe transaction.",
            "value": "Ether value of Safe transaction."
          },
          "returns": {
            "success": "Boolean indicating transaction's success."
          }
        },
        "getTransactionHash(address,address,uint256,bytes,uint8,uint256)": {
          "params": {
            "_nonce": "Transaction nonce.",
            "data": "Data payload.",
            "operation": "Operation type.",
            "safe": "The safe the transaction will be executed on",
            "to": "Destination address.",
            "value": "Ether value."
          },
          "returns": {
            "_0": "Transaction hash."
          }
        },
        "increaseNonce(uint256)": {
          "details": "allows skipping a nonce if for some reason it fails",
          "params": {
            "currentNonce": "The nonce to skip, it needs to be the current nonce"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "encodeTransactionData(address,address,uint256,bytes,uint8,uint256)": {
          "notice": "Returns the pre-image of the transaction hash (see getTransactionHash)."
        },
        "execTransaction(address,address,uint256,bytes,uint8,bytes)": {
          "notice": "Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)"
        },
        "getTransactionHash(address,address,uint256,bytes,uint8,uint256)": {
          "notice": "Returns transaction hash to be signed by owners."
        },
        "increaseNonce(uint256)": {
          "notice": "Increment the nonce manually"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/citrus-safe-modules/src/GlobalModule.sol": "GlobalModule"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "remappings": []
  },
  "sources": {
    "contracts/citrus-safe-modules/src/GlobalModule.sol": {
      "keccak256": "0x83bf0815c57a3ed5416e731edf60b5b2c13523ef397725bb6732e2419750ea85",
      "license": "LGPL-3.0-only",
      "urls": [
        "bzz-raw://a00fcdd33aa035c7a58d10ca425d0616fb54e5e4e7cd31046e6ee650c7a5b5df",
        "dweb:/ipfs/QmZaNbwndNvXLMYxdQBXVrJaXdANtbDCkP4GX72EUtBWt3"
      ]
    },
    "contracts/citrus-safe-modules/src/interfaces/ISafe.sol": {
      "keccak256": "0x773a7995c60afd7f22ee03d27a5dd1c01df0aefa13cd4222573ee9970a5b4845",
      "license": "LGPL-3.0-only",
      "urls": [
        "bzz-raw://d51ddda49ebccf5f14823c5b4135b7e48593cbcd2511cdacc6a115fea88861b4",
        "dweb:/ipfs/QmWvP4t4Bwckv5Dr6QXp1MHxVkxRrYeowS4r3hhdcv7rZg"
      ]
    }
  },
  "version": 1
}
{
  "compiler": {
    "version": "0.8.20+commit.a1b79de6"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "factoryV1",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "legacyFactoryV2",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "factoryV2_1",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "factoryV2_2",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "legacyRouterV2",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "routerV2_1",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "routerV2_2",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__AddressZero",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__IdenticalAddresses",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__InsufficientAmount",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "JoeLibrary__InsufficientLiquidity",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "LBQuoter_InvalidLength",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SafeCast__Exceeds128Bits",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "SafeCast__Exceeds24Bits",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "x",
            "type": "uint256"
          },
          {
            "internalType": "int256",
            "name": "y",
            "type": "int256"
          }
        ],
        "name": "Uint128x128Math__PowUnderflow",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Uint256x256Math__MulDivOverflow",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "Uint256x256Math__MulShiftOverflow",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "route",
            "type": "address[]"
          },
          {
            "internalType": "uint128",
            "name": "amountIn",
            "type": "uint128"
          }
        ],
        "name": "findBestPathFromAmountIn",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address[]",
                "name": "route",
                "type": "address[]"
              },
              {
                "internalType": "address[]",
                "name": "pairs",
                "type": "address[]"
              },
              {
                "internalType": "uint256[]",
                "name": "binSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "uint128[]",
                "name": "amounts",
                "type": "uint128[]"
              },
              {
                "internalType": "uint128[]",
                "name": "virtualAmountsWithoutSlippage",
                "type": "uint128[]"
              },
              {
                "internalType": "uint128[]",
                "name": "fees",
                "type": "uint128[]"
              }
            ],
            "internalType": "struct LBQuoter.Quote",
            "name": "quote",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "route",
            "type": "address[]"
          },
          {
            "internalType": "uint128",
            "name": "amountOut",
            "type": "uint128"
          }
        ],
        "name": "findBestPathFromAmountOut",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address[]",
                "name": "route",
                "type": "address[]"
              },
              {
                "internalType": "address[]",
                "name": "pairs",
                "type": "address[]"
              },
              {
                "internalType": "uint256[]",
                "name": "binSteps",
                "type": "uint256[]"
              },
              {
                "internalType": "enum ILBRouter.Version[]",
                "name": "versions",
                "type": "uint8[]"
              },
              {
                "internalType": "uint128[]",
                "name": "amounts",
                "type": "uint128[]"
              },
              {
                "internalType": "uint128[]",
                "name": "virtualAmountsWithoutSlippage",
                "type": "uint128[]"
              },
              {
                "internalType": "uint128[]",
                "name": "fees",
                "type": "uint128[]"
              }
            ],
            "internalType": "struct LBQuoter.Quote",
            "name": "quote",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactoryV1",
        "outputs": [
          {
            "internalType": "address",
            "name": "factoryV1",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactoryV2_1",
        "outputs": [
          {
            "internalType": "address",
            "name": "factoryV2_1",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getFactoryV2_2",
        "outputs": [
          {
            "internalType": "address",
            "name": "factoryV2_2",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLegacyFactoryV2",
        "outputs": [
          {
            "internalType": "address",
            "name": "legacyFactoryV2",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getLegacyRouterV2",
        "outputs": [
          {
            "internalType": "address",
            "name": "legacyRouterV2",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRouterV2_1",
        "outputs": [
          {
            "internalType": "address",
            "name": "routerV2_1",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRouterV2_2",
        "outputs": [
          {
            "internalType": "address",
            "name": "routerV2_2",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "Trader Joe",
      "kind": "dev",
      "methods": {
        "constructor": {
          "params": {
            "factoryV1": "Dex V1 factory address",
            "factoryV2_1": "Dex V2.1 factory address",
            "factoryV2_2": "Dex V2.2 factory address",
            "legacyFactoryV2": "Dex V2 factory address",
            "legacyRouterV2": "Dex V2 router address",
            "routerV2_1": "Dex V2.1 router address",
            "routerV2_2": "Dex V2.2 router address"
          }
        },
        "findBestPathFromAmountIn(address[],uint128)": {
          "params": {
            "amountIn": "Swap amount in",
            "route": "List of the tokens to go through"
          },
          "returns": {
            "quote": "The Quote structure containing the necessary element to perform the swap"
          }
        },
        "findBestPathFromAmountOut(address[],uint128)": {
          "params": {
            "amountOut": "Swap amount out",
            "route": "List of the tokens to go through"
          },
          "returns": {
            "quote": "The Quote structure containing the necessary element to perform the swap"
          }
        },
        "getFactoryV1()": {
          "returns": {
            "factoryV1": "Dex V1 factory address"
          }
        },
        "getFactoryV2_1()": {
          "returns": {
            "factoryV2_1": "Dex V2.1 factory address"
          }
        },
        "getFactoryV2_2()": {
          "returns": {
            "factoryV2_2": "Dex V2.2 factory address"
          }
        },
        "getLegacyFactoryV2()": {
          "returns": {
            "legacyFactoryV2": "Dex V2 factory address"
          }
        },
        "getLegacyRouterV2()": {
          "returns": {
            "legacyRouterV2": "Dex V2 router address"
          }
        },
        "getRouterV2_1()": {
          "returns": {
            "routerV2_1": "Dex V2.1 router address"
          }
        },
        "getRouterV2_2()": {
          "returns": {
            "routerV2_2": "Dex V2.2 router address"
          }
        }
      },
      "title": "Liquidity Book Quoter",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "constructor": {
          "notice": "Constructor"
        },
        "findBestPathFromAmountIn(address[],uint128)": {
          "notice": "Finds the best path given a list of tokens and the input amount wanted from the swap"
        },
        "findBestPathFromAmountOut(address[],uint128)": {
          "notice": "Finds the best path given a list of tokens and the output amount wanted from the swap"
        },
        "getFactoryV1()": {
          "notice": "Returns the Dex V1 factory address"
        },
        "getFactoryV2_1()": {
          "notice": "Returns the Dex V2.1 factory address"
        },
        "getFactoryV2_2()": {
          "notice": "Returns the Dex V2.2 factory address"
        },
        "getLegacyFactoryV2()": {
          "notice": "Returns the Dex V2 factory address"
        },
        "getLegacyRouterV2()": {
          "notice": "Returns the Dex V2 router address"
        },
        "getRouterV2_1()": {
          "notice": "Returns the Dex V2.1 router address"
        },
        "getRouterV2_2()": {
          "notice": "Returns the Dex V2.2 router address"
        }
      },
      "notice": "Helper contract to determine best path through multiple markets This contract shouldn't be used on-chain as it consumes a lot of gas It should be used for off-chain purposes, like calculating the best path for a swap",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/joe-v2/src/LBQuoter.sol": "LBQuoter"
    },
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "remappings": []
  },
  "sources": {
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
      "license": "MIT",
      "urls": [
        "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
        "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
      ]
    },
    "contracts/joe-v2/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
      "license": "MIT",
      "urls": [
        "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
        "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
      ]
    },
    "contracts/joe-v2/src/LBQuoter.sol": {
      "keccak256": "0x167d133fb38d7464cd1dde45ab6ba0fec63eb5b1df72517599f615a4ce6d9a77",
      "license": "MIT",
      "urls": [
        "bzz-raw://ac36b3513182ebf572f9ea70f08ab4769b9895f1b9aa0228e38a7eae2f94ff14",
        "dweb:/ipfs/QmXkLDJe3eJJFEPjZ9NrEkLwCYZgr4h4npjZv9uAuGQg67"
      ]
    },
    "contracts/joe-v2/src/interfaces/IJoeFactory.sol": {
      "keccak256": "0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://39e15e3db5f37a23410e6917d0f006390bfe48bb7e1549242e2927c498ee9c70",
        "dweb:/ipfs/QmapjmXv1ouKPGL7vvLYaaFakxZ3YJb55LdNe2nyN8RZaz"
      ]
    },
    "contracts/joe-v2/src/interfaces/IJoePair.sol": {
      "keccak256": "0x8f3f3f22167722e8e0b200768ef953b5f5a84064cf385e16d162ac4229f34c23",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://c7d698db18059eadd0490f68c69b04b5349150346601dc6951d8cc2a2796bc25",
        "dweb:/ipfs/Qmd2CxzN7GtM8BhkotDroJkWLEYdvT8U3vwYSK4chbSWos"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBFactory.sol": {
      "keccak256": "0xfc815a05b28165166b4e06c9c025e35807d5e0f6a406b96ec7ebe176dedf8d95",
      "license": "MIT",
      "urls": [
        "bzz-raw://3542a541bec579d39f1e9dbb0f45d3f70ce3ebf45c74449b36ebdd697e06f6b3",
        "dweb:/ipfs/QmUPbvYBpVPwW9Xb9UBukrBzuQirTSv6rwaurVrgV1CLSt"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBFlashLoanCallback.sol": {
      "keccak256": "0x14e08d6774de7f9a6b0b008e4a2132e28ac5d9e0ed9327c2d305ccd4a8e500d8",
      "license": "MIT",
      "urls": [
        "bzz-raw://316063733817a0d300b2f3c6cdd598be35745343646601dd370c1037e851bd88",
        "dweb:/ipfs/QmRV3tNsZ4VcyNWiBphDbWM8bxV41sstKkgziuYyGphnE7"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBHooks.sol": {
      "keccak256": "0xad32a000f052e48266932bc3eb9818de0a80b77235ae5d44d9a5286264992f1a",
      "license": "MIT",
      "urls": [
        "bzz-raw://044044be7373a509f946ede2ee05580f55438ce317e3c538a888208f18f39109",
        "dweb:/ipfs/QmWK93hkd91t7LQRnVN1QZXUniCLh5HifXrww5BhRxaD9n"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyFactory.sol": {
      "keccak256": "0x3269cc8e517d0a7e366d3b739336d3817411628bb9f528261be000f47ae45c9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://3b2180a6846857f20d26b3ae98b1270359b1b2ad1dc0cfb011744e7703d0b2c3",
        "dweb:/ipfs/QmfG68dWC8Xkik3YpnYxTP1cLxmyokDB4CTW4frkvCiwGe"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyPair.sol": {
      "keccak256": "0x21c9cbc346115dae037994b0a176fda4b9017202233ef49b0c90ffbf5b136368",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba6657c183ee7c2cc232cae83249a9f6da8c870833eec1f380b735edc35b1e78",
        "dweb:/ipfs/QmY3wRKixjJfVkjzrnVoFwjnDfewSYCzc54MihCs51n4dB"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyRouter.sol": {
      "keccak256": "0x65219b048a847edc2b77d51dcbd31472aa7df01227d94d22926f7a810c661368",
      "license": "MIT",
      "urls": [
        "bzz-raw://e15005847afe52ad3049bbd15c5ada9f50a56f10e962a740f34ba467b3ba9af8",
        "dweb:/ipfs/QmU8Fvm9hvvV1nDraD6jDcfHTCU2FuCFj15ggxN6D76Wdv"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBLegacyToken.sol": {
      "keccak256": "0x6eb89172d4041a84c97ec5f35954e15ce3c7f704d1aabc0c9a1cbf11f868ee6c",
      "license": "MIT",
      "urls": [
        "bzz-raw://360d38d9f83344daeae27681ee85d68e8b6f7ca3598e2d38b09ef319ca438ff3",
        "dweb:/ipfs/QmY9TMZ1SAuQaFxSj4uCDZzjj5ZHS6q4NVw5LzHDgAp8qZ"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBPair.sol": {
      "keccak256": "0x9c2afceaceaa81e316e09122d89f6ae4310353877178a1cae4a36756f26e3ee1",
      "license": "MIT",
      "urls": [
        "bzz-raw://fa6917af5b29e67f5496b1043abba27f4af41481df094ec69aba36331c4229ce",
        "dweb:/ipfs/QmP84Q4P5dNw18FDhg4xXPbHXgNxggRicmJmAPNpkTxUjo"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBRouter.sol": {
      "keccak256": "0xc2330634cbb078a35639ea73033300c426b28ae53aa79d0ee9b11c33b35dfb98",
      "license": "MIT",
      "urls": [
        "bzz-raw://b1f2934241b5499d895c8b1e31b8372fa3face92ba0e82297e491f1a69e2d128",
        "dweb:/ipfs/QmeTiaBG37H2oDY8axh8VceH3rksonFEY9gdgJxRo97Njh"
      ]
    },
    "contracts/joe-v2/src/interfaces/ILBToken.sol": {
      "keccak256": "0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a",
      "license": "MIT",
      "urls": [
        "bzz-raw://ba0a398ffeea4227ce9eee3a76c97a47a8ac39ac2b85cda60bc24a93c5c7386a",
        "dweb:/ipfs/QmP1oUtTGG6PWu1n9T7n38iQVKMsDavhA9kCyLSjWTEgLt"
      ]
    },
    "contracts/joe-v2/src/interfaces/IWNATIVE.sol": {
      "keccak256": "0x51912963f64926845c6d02db0e4925f3bfef8eeefb5b20997d4e64c7ea40a020",
      "license": "MIT",
      "urls": [
        "bzz-raw://f25bf0e1cce04c89c339f6bba1e28ff520dfffd1b562f1def9717279d8180a20",
        "dweb:/ipfs/QmQY5TKhxfLxTsqbvD5zP5p3enWo8z5FXEocbvTM8MTMC6"
      ]
    },
    "contracts/joe-v2/src/libraries/Constants.sol": {
      "keccak256": "0xeb531944284c1a12410b47605869a65f7a3d6f97e24e9dff5a9b8972e9dd6e5a",
      "license": "MIT",
      "urls": [
        "bzz-raw://4840c7e6de5c27bd9c46bed582bdaa9e7de4b9d3e9441a4b7b0de40f6ae1e7ca",
        "dweb:/ipfs/QmNZnqNc2MayvLR3VsmPZ3tzhkFkPgD3J7tKLwWr6mzFxM"
      ]
    },
    "contracts/joe-v2/src/libraries/Hooks.sol": {
      "keccak256": "0xa68b3308bf297c2cd03f2e4f28a6a5e0e68c415d617672bf356aadff56c53959",
      "license": "MIT",
      "urls": [
        "bzz-raw://b9a6b20fd8aeefacb64dbf3b463b0c10cb8848fd61f4f3344ed53731ffaf686a",
        "dweb:/ipfs/QmRvcBNazvsKvfDXQtdQj3GczaNLbFcqVYdcJCoRA6MDop"
      ]
    },
    "contracts/joe-v2/src/libraries/JoeLibrary.sol": {
      "keccak256": "0x8d5f41e6a440f97475138cff9a22eef7cfe24dc489c4dcd28d64206eba50c243",
      "license": "GPL-3.0",
      "urls": [
        "bzz-raw://c7e3a7450f460794f5ccfb4b1b8c6a9ad13c20b2ce3a62ba2acb2a17e1021131",
        "dweb:/ipfs/QmbaerUuNUgT1DYy1vm7eFCk6JpCy6dkpfpAcYZsNNH3Lm"
      ]
    },
    "contracts/joe-v2/src/libraries/PriceHelper.sol": {
      "keccak256": "0xe660c07d0812609a65bcdccc1d7212116e8075c3a86cf9b15ead3639b0f9fdb7",
      "license": "MIT",
      "urls": [
        "bzz-raw://61c85e1bc1107f22b13c3c5e43fdda89eb6ed3f9ab9df123e18914b24f3ff054",
        "dweb:/ipfs/QmUewajrhnmLPJ7qgDmXb4FZbNJdtArxGu5eQca8Mo1YTb"
      ]
    },
    "contracts/joe-v2/src/libraries/math/BitMath.sol": {
      "keccak256": "0x7b359776521706ae1291cbf8707919aaa5cb78d59b9dfbe5393322c393250b1f",
      "license": "MIT",
      "urls": [
        "bzz-raw://bb9fe4accf6abda06f8b4ba02f86d37df109e4b8d14b78a848eb4b4cee359485",
        "dweb:/ipfs/QmSTkrek6fhvgiato8tC6ARz4M11Ynqgyuy7d2QeGiWXEG"
      ]
    },
    "contracts/joe-v2/src/libraries/math/SafeCast.sol": {
      "keccak256": "0x3e22926e8f7d352568f01a896860c83b3ab35b47a0ed9a0f2e780a82aa52f4a8",
      "license": "MIT",
      "urls": [
        "bzz-raw://3fc2ade1520197ab28ad6292a1d70d3182b9741030ad69c8a915b4c09ebec1f5",
        "dweb:/ipfs/QmYRtP5AiMXCpiBPrmuWd2R1mYGyuXoa24GeZJRUBSS7wH"
      ]
    },
    "contracts/joe-v2/src/libraries/math/Uint128x128Math.sol": {
      "keccak256": "0xe84206e2561ef32aef2d23ce5022f0174898a26d4d60346675e7a7fd76054fc0",
      "license": "MIT",
      "urls": [
        "bzz-raw://4238023aeb54caf0d245b00063b37a736142413d3040a175b8d5765ee148242d",
        "dweb:/ipfs/QmSqvRJAxtCLjkp19rW8jxzvocr6e478u2Ge5iLyJojJXF"
      ]
    },
    "contracts/joe-v2/src/libraries/math/Uint256x256Math.sol": {
      "keccak256": "0xa85a6d3be7cdf95ec9b246d36c3843de738af3df11fcc2bf8bf6e15c350870d6",
      "license": "MIT",
      "urls": [
        "bzz-raw://ffa97dbe1dc755a243a81a2590e3f25e5399549351a941c2835cca190a0a3fa0",
        "dweb:/ipfs/QmbKUhSjHj1Y48dCPfiYSLybQ8miYfQ99EWsWdP8orpeaB"
      ]
    }
  },
  "version": 1
}